Title: Finding and Understanding Bugs in C Compilers

Authors: Xuejun Yang, Yang Chen, Eric Eide, John Regehr

Published in: 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2011

-------------x-------------x-------------x-------------

1.	What is your take-away message from this paper?

In this paper, authors introduce a randomized test-case generation tool 'Csmith' to find bugs in the C compiler.

Compilers run many critical and important codes of real life and so compilers should run correctly those codes. 
Besides, day by day, compilers are being updated by developers with new features, efficiency optimization and different architecture. 
That's why compiler may contain bugs. Authors aim to find compiler bugs by generating diverse random test cases.

2.	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? What are the previous solutions and why are they inadequate?

•	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? 

Developers nowadays try to develop high optimize compiler where compiler should work in high speed with low memory consumption but with high code quality and debugging features. So there is a good chance that optimizing compilers will contain bugs. 
Many important softwares are using C code and so correct C compiler is highly demanded. Thats why authors target compilers to find bugs.

•	What are the previous solutions and why are they inadequate?

Some compiler testing approaches have been used before but Csmith differs with those in terms of diverse random test generation, large set of C features and single interpretation.

3.	What is the proposed solution (hypothesis, idea, design)? Why is it believed it will work? How does it represent an improvement? How is the solution achieved?

•	What is the proposed solution (hypothesis, idea, design)? How is the solution achieved?

The workflow of Csmith:
- Generates a C program randomly after ignoring undefined-unspecified behaviors and ensuring safety mechanisms.
- Prepare a test harness and compile the test program in several compilers.
- Runs the executables and compares the outputs.
- Report bugs with small test case after automated test case reduction.

Authors reported bugs to 11 different C compiler development teams. 
Five of these compilers (GCC, LLVM, CIL, TCC, and Open64) were open source and five were commercial products. 
The remaining one is CompCert that is publicly available but not open source.
  
•	Why is it believed it will work? How does it represent an improvement? 

Authors tested Csmith for three years and during this period they found more than 325 previously unknown bugs.

4.	What is the author's evaluation of the solution? What logic, argument, evidence, artifacts (e.g., a proof-of-concept system), or experiments are presented in support of the idea?

Experience with open-source compilers:
- Authors reported 79 GCC bugs and 202 LLVM bugs and total 325 bugs (GCC, LLVM, and others).
- Most of the reported bugs have been fixed by developers.
- 25 of the GCC bugs were marked as P1: release-blocking priority bug.

Experience with commercial compilers:
- Csmith found wrong code errors and crash errors within a few hours of testing.

Testing CompCert CompCert:
- Csmith found wrong code error, bit overflow error and many crash errors in CompCert.

Should one configure Csmith to generate small programs or large ones?
- Higher the program size -> higher the code features' involvement -> higher the distinct crash errors.
- The greatest number of distinct crash errors is found by programs containing 8K–16K tokens, average 81KB size.

Bug-Finding Performance Compared to Other Tools:
- Csmith significantly outperforms the other tools.

Code Coverage - the GCC and LLVM test suites with 10,000 randomly generated programs:
- Csmith generated programs did not perform significant cove coverage than compilers’ own existing test suites.

Where Are the Bugs?
- Most of the bugs in GCC were in the middle end (49 out of 79).
- Most of the bugs in GCC were in the middle end and back end (75+74 out of 202).

Are we finding bugs that matter?
- The developers fixed almost all of the bugs that authors reported.
- The GCC development team marked 25 of reported bugs as P1: the maximum release-blocking priority.

Summary of the experiments:
- Csmith found more than hundreds of defects in all the compilers it tested and many of them classified as high-priority bugs. 
- Authors ran Csmith through many versions of GCC and LLVM and observed that the quality of both compilers is generally improving. 
- The largest number of bugs is found at large program size: about 81 KB.
- Csmith found more distinct compiler crash errors and missed bugs than previous program generators.
- Csmith generated programs did not perform significant cove coverage than compilers’ own existing test suites.

5. What is your analysis of the identified problem, idea and evaluation? Is this a good idea? What flaws do you perceive in the work? What are the most interesting or controversial ideas? For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

• What is your analysis of the identified problem, idea and evaluation? Is this a good idea?

Compiler should be correct. So find new bugs in comipler is significant approaches:
- Csmith generated programs are well formed and include complex features like array, pointer and struct.
- Csmith generated programs use various safety mechanisms to avoid undefined behaviors and unspecified behaviors.

• What flaws do you perceive in the work? What are the most interesting or controversial ideas? 

- Csmith performs differential testing within an equivalence class but not across classes of compiler. 
- Majority voting will fail if all compilers make same mistake (althougth the probabily is very very low).

•	For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

- The comparison will help the developers to improve their compiler.

6.	What are the paper's contributions (author's and your opinion)? Ideas, methods, software, experimental results, experimental techniques? 

- Introduce Csmith to find bugs in open source C compiler.
- Csmith generated programs cover large part of C features.
- Find many previously unkonwon bugs.
- Provide the collection of qualitative and quantitative results about the bugs.

7.	What are future directions for this research (author's and yours, perhaps driven by shortcomings or other critiques)?

- Add support for strings, dynamic memory allocation, floating-point types, unions, recursion, and function pointers.
- Add support for significant cove coverage than compilers’ own existing test suites.

8.	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)? What do you find difficult to understand? List as many as you can.

•	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)?

Good or bad:
- Csmith program must avoid undefined behaviors and unspecified behaviors of others compiler.
- Csmith performs differential testing within an equivalence class but not across classes of compiler.
- Find number of distinct crash and wrong error code, run several years.

•	What do you find difficult to understand? List as many as you can.

- Optimization flags such as –O and –O2.
- Miscompilations vs silent wrong code, idiomatic code, single interpretation code.
- points-to fact vs points-to set, null pointer and the invalid pointer.
- compiler optimization(TCC-No), verification(CompCert-Yes) and testing.

- The single meaning of a C program is the sequence of side effects it performs. (Principal and Secondary)
- GCC Bug #1 ~ #4 and LLVM #1,#3
