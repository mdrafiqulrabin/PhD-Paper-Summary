Update: https://github.com/alipourm/rabin-reports/blob/master/rabin_paperform_09202019.txt

-------------x-------------x-------------x-------------

Title: Finding and Understanding Bugs in C Compilers

Authors: Xuejun Yang, Yang Chen, Eric Eide, John Regehr

Published in: 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2011

-------------x-------------x-------------x-------------

1.	What is your take-away message from this paper?



2.	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? What are the previous solutions and why are they inadequate?

•	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? 

Developers nowadays try to develop high optimize compiler where compiler should work in high speed with low memory consumption but with high code quality and debugging features. So there is a good chance that optimizing compilers will contain bugs. Many important softwares are using C code and so correct C compiler is highly demanded. Thats why authors target compilers to find bugs.

•	What are the previous solutions and why are they inadequate?

Some compiler testing approaches have been used before but Csmith differs with those in terms of random test generation, large set of C features and single interpretation.

3.	What is the proposed solution (hypothesis, idea, design)? Why is it believed it will work? How does it represent an improvement? How is the solution achieved?

•	What is the proposed solution (hypothesis, idea, design)? How is the solution achieved?

The workflow of Csmith:
- Generates a C program randomly.
- Prepare a test harness.
- Compile the test program in several compilers.
- Runs the executables.
- Compares the outputs.
  
•	Why is it believed it will work? How does it represent an improvement? 

Authors tested Csmith for three years and during this period they found more than 325 previously unknown bugs.


4.	What is the author's evaluation of the solution? What logic, argument, evidence, artifacts (e.g., a proof-of-concept system), or experiments are presented in support of the idea?


5. What is your analysis of the identified problem, idea and evaluation? Is this a good idea? What flaws do you perceive in the work? What are the most interesting or controversial ideas? For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

• What is your analysis of the identified problem, idea and evaluation? Is this a good idea?

• What flaws do you perceive in the work? What are the most interesting or controversial ideas? 

•	For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

6.	What are the paper's contributions (author's and your opinion)? Ideas, methods, software, experimental results, experimental techniques? 

- Introduce Csmith to find bugs in open source C compiler.
- Csmith generated programs cover large part of C.
- Provide the collection of qualitative and quantitative results about the bugs.

7.	What are future directions for this research (author's and yours, perhaps driven by shortcomings or other critiques)?


8.	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)? What do you find difficult to understand? List as many as you can.

•	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)?

•	What do you find difficult to understand? List as many as you can.

- Miscompilations, silent wrong code, single interpretation code.
