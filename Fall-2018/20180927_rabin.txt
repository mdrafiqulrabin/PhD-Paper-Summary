
Title: Test-Case Reduction for C Compiler Bugs

Authors: John Regehr, Eric Eide, Yang Chen, Chucky Ellison, Pascal Cuoq, Xuejun Yang

Published in: 33rd ACM SIGPLAN conference on Programming Language Design and Implementation - PLDI '12

-------------x-------------x-------------x-------------

1.	What is your take-away message from this paper?

Test case reduction is very important to report bug. 
Delta debugging is well knowned approach for test case reduction.
But delta debugging runs into too large or even invalid test cases. 

Authors propose three test case reduction approaches which are domain-specific reducers.
Their main target to generate very small test cases and avoid undefined test-case behaviors.

Two of the new reducers are Csmith add-ons and can only reduce Csmith-generated programs.
The most effective reducer is generic and can reduce any C program generated by Csmith or not.

2.	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? What are the previous solutions and why are they inadequate?

•	What is the motivation for this work (both people problem and technical problem), and its distillation into a research question? Why doesn’t the people problem have a trivial solution? 

- GCC and LLVM highlight the importance of test case reduction.
- Developers prefer small fault causing input to spend limited time for fixing bugs.
- The state-of-the-art reducers run into too large or even invalid test cases. 
- Csmith found more than 400 previously unknown C compiler bugs but the bug triggering test cases were large.
- Manual test case reduction is both time consuming and difficult, and require good understanding.
- Many compiler bugs go unreported due to the high difficulty and less understanding.
- Test case reduction is very important to report bug.

•	What are the previous solutions and why are they inadequate?

- Delta debugging is well knowned state-of-the-art reducer but runs into large and invalid test cases.
- HDD: ???
- Berkeley delta: ???

This paper mainly differs with the state-of-the-art reducers in terms of size of output and ignoring undefined test-case behaviors.

3.	What is the proposed solution (hypothesis, idea, design)? Why is it believed it will work? How does it represent an improvement? How is the solution achieved?

•	What is the proposed solution (hypothesis, idea, design)? How is the solution achieved?

Test-Case Validity: A Hybrid Solution
- Compile variant with any C compiler for compilation error.
- Examine with Valgrind and/or the Clang static analyzer for incorrect code.
- Check using KCC and/or Frama-C for undefined/unspecified behaviors.

Three Test-Case Reducer:
- Two of them only work for programs generated by Csmith.
- Third one is general-purpose and work for any C program.

Seq-Reduce: (Reduction in Csmith by Altering the Random Number Sequence)
- Launch Csmith with a command and dump the specification of the failure inducing input to a file. 
- Repeatedly load Csmith with saved sequence, modify it randomly, and then dump both the new program and its specification. 
- Save new program specification for successful variant, otherwise rolls back to the previous successful variant. 

Fast-Reduce: (AST-Based Reduction in Csmith Using Run-Time Information)
- Eliminate unreachable basic blocks (dead code) all at onece or one by one.
- Use differential testing to check path divergence to get clue about miscompilation. 
- Remove the body of a large function and replace each call with inline code.

C-Reduce:
???

•	Why is it believed it will work? How does it represent an improvement? 

- Reduce the large (37–297 KB) test cases created by Csmith into small test cases (less than 0.5 KB).
- Preserve the bug-triggering features of the original test cases into reduced test cases.

4.	What is the author's evaluation of the solution? What logic, argument, evidence, artifacts (e.g., a proof-of-concept system), or experiments are presented in support of the idea?

???

5. What is your analysis of the identified problem, idea and evaluation? Is this a good idea? What flaws do you perceive in the work? What are the most interesting or controversial ideas? For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

• What is your analysis of the identified problem, idea and evaluation? Is this a good idea? 

- Manual test case reduction is both difficult and time consuming.
- Many compiler bugs go unreported due to the high difficulty.

•	What flaws do you perceive in the work? What are the most interesting or controversial ideas? 

- It works fast if it can reduce chunk earlier, otherwise it will take long time to terminate.
- It will go to wrong direction (or stuck at local optima) if it make error in earlier step.

•	For work that has practical implications, ask whether this will work, who would want it, what it will take to give it to them, and when might it become a reality? 

- This will help developers to correct bugs in less time.

6.	What are the paper's contributions (author's and your opinion)? Ideas, methods, software, experimental results, experimental techniques? 

- Introduce a language independence framework called LangFuzz to test web interpreters.
- Compare LangFuzz against jsfunfuzz on testing of JavaScript and PHP interpreters.
- Provide study case of Generation vs Mutation and Running multiple tests in one shell.

7.	What are future directions for this research (author's and yours, perhaps driven by shortcomings or other critiques)?

- Authors present three new domain-specific test-case reducers for C code.
- Authors present various solutions to the test-case validity problem to avoid undefined and unspecified behaviors.
- Reducers proposed by authors produce output more than 25 times smaller than tdelta debugger.

8.	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)? What do you find difficult to understand? List as many as you can.

•	What questions are you left with? What questions would you like to raise in an open discussion of the work (review interesting and controversial points, above)? 
- ???

•	What do you find difficult to understand? List as many as you can.
- Terms: “sidetracked”, “technical minutiae” of C
- unspecified behaviors vs implementation-defined behavior, point solutions vs generic solutions
- Listing 1, ???
- Like debugging, distilling a bug-causing compiler input to its essence is often an exercise in trial and error.
